// -*- C++ -*-
// File generated by PyFoam - sorry for the ugliness

FoamFile
{
 version 2.0;
 format ascii;
 class volScalarField;
 object T;
}

#include "include/freestreamConditions"
dimensions [ 0 0 0 1 0 0 0 ];

internalField uniform $T;

boundaryField
{
    inlet
    {
        type            codedFixedValue;
        value           $internalField;
	name		interfaceTemperature;

code
#{
namespace py = pybind11;
using namespace pybind11::literals;
//py::initialize_interpreter();
const fvPatch& boundaryPatch = patch();
py::object scope_ = py::module_::import("__main__").attr("__dict__");
py::eval_file("python_funs.py", scope_);
scalarField& field =* this;
forAll(boundaryPatch, faceI)
{
const scalar z_orig = boundaryPatch.Cf()[faceI].z();
scope_["z_orig"] = z_orig;
py::exec("t_py = interface_t(z_orig)", scope_);
double t_py = scope_["t_py"].cast<double>();
field[faceI] = t_py;
}
//py::finalize_interpreter();
#};
codeInclude
#{
# include "fvCFD.H"
# include <IFstream.H>
# include <OFstream.H>
# include <ctime>
# include "clock.H"
# include "string.H"
# include <sstream>
# include <iomanip>
# include <cmath>
# include <iostream>
# include <vector>
# include "Python.h"
# include "pybind11/pybind11.h"
# include "pybind11/eval.h"
# include "pybind11/embed.h"
# include "pybind11/numpy.h"
# include "pybind11/stl.h"
#};
codeOptions
#{
-Wno-old-style-cast \
-I$(LIB_SRC)/finiteVolume/lnInclude \
-I$(LIB_SRC)/meshTools/lnInclude \
-I//home/anais/.local/lib/python3.5/site-packages/pybind11/include \
-I/usr/include/python3.5m
#};
codeLibs
#{
-lmeshTools \
-lfiniteVolume \
-lpython3.5m 
#};
}
  outlet
  {
        type            characteristicVelocityInletOutletTemperature;
		#include   		"include/freestreamConditions"
        value           uniform $T;
  }
  atmosphere
  {
        type            characteristicFarfieldTemperature;
		#include   		"include/freestreamConditions"
        value           uniform $T;
  }
     "nac_.*"
  {
	type		zeroGradient;
  }
    "fuse_.*"
  {
	type		zeroGradient;
  }
    wedge_left
    {
		type 		    wedge;
    }	
    wedge_right
    {
	    type 		    wedge;
    }
} 	
// ************************************************************************* //
